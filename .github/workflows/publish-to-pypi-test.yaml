name: Publish to PyPI Test
on:
  release:
    types:
      - published

jobs:
  extract-version:
    runs-on: ubuntu-latest
    steps:
      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag name is not in the correct format. Expected format: v<MAJOR>.<MINOR>.<PATCH>"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

  check-version-before:
    runs-on: ubuntu-latest
    needs: extract-version
    steps:
      - name: Check if version already exists
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          echo "Checking if version $VERSION already exists for all packages..."

          # Define package names
          PACKAGES=(
            "hyperpocket"
            "hyperpocket-anthropic"
            "hyperpocket-langchain"
            "hyperpocket-langgraph"
            "hyperpocket-openai"
            "hyperpocket-llamaindex"
            "hyperpocket-crewai"
            "hyperpocket-gemini"
            "hyperdock-fileio"
            "hyperdock-langchain"
          )

          for PACKAGE in "${PACKAGES[@]}"; do
            echo "Checking package: $PACKAGE"
            URL=https://test.pypi.org/pypi/${PACKAGE}/${VERSION}/json
            echo "Request URL: $URL"

            responses=$( curl -s -o /dev/null -w "%{http_code}" $URL)
            if [ "$responses" -ne "200" ]; then
              echo "Version $VERSION for package $PACKAGE does not exist. Continuing..."
            else
              echo "Version $VERSION for package $PACKAGE already exists on Test PyPI. Stopping workflow."
              exit 1
            fi
          done

  publish:
    runs-on: ubuntu-latest
    needs: check-version-before

    steps:
      # 1. Repository Checkout
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      # 2. Setup uv
      - name: Set up UV
        uses: astral-sh/setup-uv@v5

      # 3. Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 4. Install Dependencies
      - name: Install Dependencies
        run: |
          pip install tomlkit

      # 5. Update Version
      - name: Update version in all packages
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          echo "Updating version to $VERSION"
          
          PYTHON_COMMAND=$(which python)
          PATHS=(
            "libs/hyperpocket"
            "libs/extensions/anthropic"
            "libs/extensions/langchain"
            "libs/extensions/langgraph"
            "libs/extensions/llamaindex"
            "libs/extensions/openai"
            "libs/extensions/crewai"
            "libs/extensions/gemini"
            "libs/docks/hyperdock-fileio"
            "libs/docks/hyperdock-langchain"
          )
          
          for PATH in "${PATHS[@]}"; do
            echo "Running: python scripts/version.py $VERSION --path $PATH"
            $PYTHON_COMMAND scripts/version.py "$VERSION" --path "$PATH"
          
            if [ $? -ne 0 ]; then
              echo "Error: Command failed for path $PATH"
              exit 1
            fi
          done

          echo "All version dumped successfully"

      # 6. Git Push
      - name: Git Push
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          echo "Git Branch name : $BRANCH_NAME"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .
          
          if ! git diff-index --quiet HEAD --; then
            git commit -m "uv version up"
            git push origin $BRANCH_NAME
          else
            echo "No changes to commit. Skipping push."
          fi

      # 7. Publish
      - name: Publish hyperpocket package
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: libs/hyperpocket
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/

      - name: Publish hyperpocket anthropic package
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: libs/extensions/anthropic
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/

      - name: Publish hyperpocket langchain package
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: libs/extensions/langchain
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/

      - name: Publish hyperpocket langgraph package
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: libs/extensions/langgraph
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/

      - name: Publish hyperpocket llamaindex package
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: libs/extensions/llamaindex
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/

      - name: Publish hyperpocket openai package
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: libs/extensions/openai
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/

      - name: Publish hyperpocket crewai package
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: libs/extensions/crewai
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/

      - name: Publish hyperpocket gemini package
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: libs/extensions/gemini
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/

      - name: Publish hyperdock-fileio package
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: libs/docks/hyperdock-fileio
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/

      - name: Publish hyperdock-langchain package
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: libs/docks/hyperdock-langchain
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/


  check-version-after:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      # Check if publishing succeeded
      - name: Check if version uploaded successfully
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          echo "Checking if version $VERSION uploaded successfully for all packages..."
          
          PACKAGES=(
            "hyperpocket"
            "hyperpocket-anthropic"
            "hyperpocket-langchain"
            "hyperpocket-langgraph"
            "hyperpocket-openai"
            "hyperpocket-llamaindex"
            "hyperpocket-crewai"
            "hyperpocket-gemini"
            "hyperdock-fileio"
            "hyperdock-langchain"
          )
          
          for PACKAGE in "${PACKAGES[@]}"; do
            echo "Checking package: $PACKAGE"
            URL=https://test.pypi.org/pypi/${PACKAGE}/${VERSION}/json
            echo "Request URL: $URL"
          
            ATTEMPTS=0
            MAX_ATTEMPTS=10
          
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
          
              responses=$( curl -s -o /dev/null -w "%{http_code}" $URL)
              if [ "$responses" -eq "200" ]; then
                echo "Version $VERSION for package $PACKAGE uploaded on Test PyPI successfully. Continuing..."
                break
              else
                echo "Attempt $((ATTEMPTS + 1)) failed for package $PACKAGE. HTTP status: $responses"
                ATTEMPTS=$((ATTEMPTS + 1))
                if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
                  echo "Retrying in 10 seconds..."
                  sleep 10
                else
                  echo "Version $VERSION for package $PACKAGE does not appear to be uploaded on Test PyPI after $MAX_ATTEMPTS attempts."
                  exit 1
                fi
              fi
            done
          done
