name: Publish to PyPI Test
on:
  release:
    types:
      - published

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.full_without_prefix }}
    steps:
      - uses: nowsprinting/check-version-format-action@v3
        name: extract version
        id: version
        with:
          prefix: 'v'

      - name: export to env
        run: |
          VERSION=${{ steps.version.outputs.full_without_prefix}}
          echo "Version: $VERSION"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag name is not in the correct format. Expected format: v<MAJOR>.<MINOR>.<PATCH>"
            exit 1
          fi

  # Define a matrix job for each package
  publish-package-test:
    runs-on: ubuntu-latest
    needs: extract-version
    strategy:
      fail-fast: false
      matrix:
        package:
          - { name: "hyperpocket", path: "libs/hyperpocket" }
          - { name: "hyperpocket-anthropic", path: "libs/extensions/anthropic" }
          - { name: "hyperpocket-langchain", path: "libs/extensions/langchain" }
          - { name: "hyperpocket-langgraph", path: "libs/extensions/langgraph" }
          - { name: "hyperpocket-openai", path: "libs/extensions/openai" }
          - { name: "hyperpocket-llamaindex", path: "libs/extensions/llamaindex" }
          - { name: "hyperpocket-crewai", path: "libs/extensions/crewai" }
          - { name: "hyperpocket-gemini", path: "libs/extensions/gemini" }
          - { name: "hyperdock-fileio", path: "libs/docks/hyperdock-fileio" }
          - { name: "hyperdock-langchain", path: "libs/docks/hyperdock-langchain" }
          - { name: "hyperdock-container", path: "libs/docks/hyperdock-container" }
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Set up UV
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install tomlkit

      - name: Check if version already exists
        id: check_version
        run: |
          VERSION=${{ needs.extract-version.outputs.version }}
          PACKAGE_NAME=${{ matrix.package.name }}
          echo "Checking if version $VERSION already exists for package $PACKAGE_NAME..."
          URL=https://test.pypi.org/pypi/${PACKAGE_NAME}/${VERSION}/json
          responses=$( curl -s -o /dev/null -w "%{http_code}" $URL)
          if [ "$responses" -eq "200" ]; then
            echo "Version $VERSION for package $PACKAGE_NAME already exists on Test PyPI. Skipping publish."
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Update version in package
        if: steps.check_version.outputs.exists == 'false'
        run: |
          VERSION=${{ needs.extract-version.outputs.version }}
          PACKAGE_PATH=${{ matrix.package.path }}
          PYTHON_COMMAND=$(which python)
          echo "Update Version: python scripts/version.py $VERSION --path $PACKAGE_PATH"
          $PYTHON_COMMAND scripts/version.py "$VERSION" --path "$PACKAGE_PATH"

      - name: Git Push
        if: steps.check_version.outputs.exists == 'false'
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          echo "Git Branch name : $BRANCH_NAME"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff-index --quiet HEAD --; then
            git commit -m "uv version up"
            git push origin $BRANCH_NAME
          else
            echo "No changes to commit. Skipping push."
          fi

      - name: Publish package to Test PyPI
        if: steps.check_version.outputs.exists == 'false'
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        working-directory: ${{ matrix.package.path }}
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/

      - name: Check if version uploaded successfully
        run: |
          VERSION=${{ needs.extract-version.outputs.version }}
          PACKAGE_NAME=${{ matrix.package.name }}
          echo "Checking if version $VERSION uploaded successfully for package $PACKAGE_NAME..."
          URL=https://test.pypi.org/pypi/${PACKAGE_NAME}/${VERSION}/json
          ATTEMPTS=0
          MAX_ATTEMPTS=10
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            responses=$( curl -s -o /dev/null -w "%{http_code}" $URL)
            if [ "$responses" -eq "200" ]; then
              echo "Version $VERSION for package $PACKAGE_NAME uploaded on Test PyPI successfully."
              break
            else
              echo "Attempt $((ATTEMPTS + 1)) failed for package $PACKAGE_NAME. HTTP status: $responses"
              ATTEMPTS=$((ATTEMPTS + 1))
              if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
                echo "Retrying in 10 seconds..."
                sleep 10
              else
                echo "Version $VERSION for package $PACKAGE_NAME does not appear to be uploaded on Test PyPI after $MAX_ATTEMPTS attempts."
                exit 1
              fi
            fi
          done
