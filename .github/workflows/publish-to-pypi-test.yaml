name: Publish to PyPI Test

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy"
        required: true
        default: "0.1.0"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Repository Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Check if Version already exists
      - name: Check if version already exists
        run: |
          VERSION=${{ github.event.inputs.version }}
          echo "Checking if version $VERSION already exists for all packages..."
          
          # Define package names
          PACKAGES=("hyperpocket" "hyperpocket_anthropic" "hyperpocket_langchain" "hyperpocket_langgraph" "hyperpocket_openai" "hyperpocket_llamaindex")
          
          for PACKAGE in "${PACKAGES[@]}"; do
            echo "Checking package: $PACKAGE"
            URL=https://test.pypi.org/pypi/${PACKAGE}/${VERSION}/json
          
            responses=$(curl -s $URL)
            if echo "$responses" | grep -q "Not Found"; then
              echo "Version $VERSION for package $PACKAGE does not exist. Continuing..."
            else
              echo "Version $VERSION for package $PACKAGE already exists on PyPI. Stopping workflow."
              exit 1
            fi
          done

      # 3. Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 4. Install Poetry
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config pypi-token.test-pypi ${{ secrets.PYPI_TEST_TOKEN }}

      # 5. Update Version
      - name: Update version in all packages
        run: |
          export VERSION=${{ github.event.inputs.version }}
          echo "Updating version to $VERSION"
          
          poetry version $VERSION
          cd libs/hyperpocket && poetry version $VERSION
          cd libs/extensions/anthropic && poetry version $VERSION
          cd libs/extensions/langchain && poetry version $VERSION
          cd libs/extensions/langgraph && poetry version $VERSION
          cd libs/extensions/llamaindex && poetry version $VERSION
          cd libs/extensions/openai && poetry version $VERSION

      # 6. Publish
      - name: Publish hyperpocket anthropic package
        working-directory: libs/hyperpocket
        run: |
          poetry build
          poetry publish --repository test-pypi

      - name: Publish hyperpocket langchain package
        working-directory: libs/extension/langchain
        run: |
          poetry build
          poetry publish --repository test-pypi

      - name: Publish hyperpocket langgraph package
        working-directory: libs/extension/langgraph
        run: |
          poetry build
          poetry publish --repository test-pypi

      - name: Publish hyperpocket llamaindex package
        working-directory: libs/extension/llamaindex
        run: |
          poetry build
          poetry publish --repository test-pypi

      - name: Publish hyperpocket openai package
        working-directory: libs/extension/openai
        run: |
          poetry build
          poetry publish --repository test-pypi

      # Check if publishing succeeded
      - name: Check if version already exists
        run: |
          VERSION=${{ github.event.inputs.version }}
          echo "Checking if version $VERSION already exists for all packages..."

          # Define package names
          PACKAGES=("hyperpocket" "hyperpocket_anthropic" "hyperpocket_langchain" "hyperpocket_langgraph" "hyperpocket_openai" "hyperpocket_llamaindex")

          for PACKAGE in "${PACKAGES[@]}"; do
            echo "Checking package: $PACKAGE"
            URL=https://test.pypi.org/pypi/${PACKAGE}/${VERSION}/json

            responses=$(curl -s $URL)
            if echo "$responses" | grep -q "Not Found"; then
              echo "Version $VERSION for package $PACKAGE does not exist. failed to publish"
              exit 1
            else
              echo "Success to publish Version $VERSION for package $PACKAGE.
            fi
          done