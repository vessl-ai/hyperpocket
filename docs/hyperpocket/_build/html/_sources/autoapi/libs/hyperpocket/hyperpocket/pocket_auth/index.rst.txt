libs.hyperpocket.hyperpocket.pocket_auth
========================================

.. py:module:: libs.hyperpocket.hyperpocket.pocket_auth



Classes
-------

.. autoapisummary::

   libs.hyperpocket.hyperpocket.pocket_auth.AuthState
   libs.hyperpocket.hyperpocket.pocket_auth.PocketAuth


Module Contents
---------------

.. py:class:: AuthState(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   .. py:attribute:: SKIP_AUTH
      :value: 'skip_auth'



   .. py:attribute:: DO_AUTH
      :value: 'do_auth'



   .. py:attribute:: DO_REFRESH
      :value: 'do_refresh'



   .. py:attribute:: NO_SESSION
      :value: 'no_session'



   .. py:attribute:: PENDING_RESOLVE
      :value: 'pending_resolve'



   .. py:attribute:: RESOLVED
      :value: 'resolved'



.. py:class:: PocketAuth(handlers: Optional[list[Type[hyperpocket.auth.handler.AuthHandlerInterface]]] = None, session_storage: Optional[hyperpocket.session.interface.SessionStorageInterface] = None, use_prebuilt_handlers: bool = None)

   Bases: :py:obj:`object`


   .. py:attribute:: handlers
      :type:  dict[str, hyperpocket.auth.handler.AuthHandlerInterface]


   .. py:attribute:: session_storage
      :type:  hyperpocket.session.interface.SessionStorageInterface


   .. py:method:: make_request(auth_scopes: list[str] = None, auth_handler_name: Optional[str] = None, auth_provider: Optional[hyperpocket.auth.AuthProvider] = None, **kwargs) -> hyperpocket.auth.handler.AuthenticateRequest

      Make AuthenticationRequest based on authentication handler.

      :param auth_scopes: list of auth scopes
      :type auth_scopes: list[str]
      :param auth_handler_name: auth handler name
      :type auth_handler_name: Optional[str]
      :param auth_provider: auth provider
      :type auth_provider: Optional[AuthProvider]

      :returns: authenticate request of the handler
      :rtype: AuthenticateRequest



   .. py:method:: check(auth_req: hyperpocket.auth.handler.AuthenticateRequest, auth_handler_name: Optional[str] = None, auth_provider: Optional[hyperpocket.auth.AuthProvider] = None, thread_id: str = 'default', profile: str = 'default', *args, **kwargs) -> AuthState

      Check current authentication state.

      The `AuthState` includes 5 states:

      - `NO_SESSION` : the session does not exist. it needs to create new session.
      - `PENDING_RESOLVE` : the session already exists. but it needs user interaction.
      - `RESOLVED` : the session already exists, and user interaction has already been completed. waiting for authentication to be continue.
      - `SKIP_AUTH` : the session already exists, and the request can be processed using this session. so authentication is not required.
      - `DO_AUTH` : the session already exists, but the request can't be processed using this session. so authentication is required.
      - `DO_REFRESH` : the session already exists, but the session is expired. so refreshing session is required.

      :param auth_req: authenticate request
      :type auth_req: AuthenticateRequest
      :param auth_handler_name: auth handler name
      :type auth_handler_name: Optional[str]
      :param auth_provider: auth provider
      :type auth_provider: Optional[AuthProvider]
      :param thread_id: thread id
      :type thread_id: Optional[str]
      :param profile: profile name
      :type profile: Optional[str]

      :returns: current authentication state
      :rtype: AuthState



   .. py:method:: get_session_state(session: Optional[hyperpocket.session.interface.BaseSessionValue], auth_req: Optional[hyperpocket.auth.handler.AuthenticateRequest]) -> AuthState
      :staticmethod:



   .. py:method:: prepare(auth_req: hyperpocket.auth.handler.AuthenticateRequest, auth_handler_name: Optional[str] = None, auth_provider: Optional[hyperpocket.auth.AuthProvider] = None, thread_id: str = 'default', profile: str = 'default', **kwargs) -> Optional[str]

      Prepare authentication.

      - If the session is pending(e.g., PENDING_RESOLVE), return the existing URL.
      - If the session is not created or not applicable(e.g., NO_SESSION, DO_AUTH), create a new session and future, then return the authentication URL.
      - Other cases (e.g., DO_REFRESH, SKIP_AUTH, RESOLVED) is not handled in this method , it just returns None.

      :param auth_req: authenticate request
      :type auth_req: AuthenticateRequest
      :param auth_handler_name: auth handler name
      :type auth_handler_name: Optional[str]
      :param auth_provider: auth provider
      :type auth_provider: Optional[AuthProvider]
      :param thread_id: thread id
      :type thread_id: Optional[str]
      :param profile: profile name
      :type profile: Optional[str]

      :returns: authentication URL
      :rtype: Optional[str]



   .. py:method:: authenticate_async(auth_req: hyperpocket.auth.handler.AuthenticateRequest, auth_handler_name: Optional[str] = None, auth_provider: Optional[hyperpocket.auth.AuthProvider] = None, thread_id: str = 'default', profile: str = 'default', **kwargs) -> hyperpocket.auth.context.AuthContext
      :async:


      Performing authentication.
      It is performing authentication. and save the session in session storage.
      And return `AuthContext`. `AuthContext` has only necessary fields of session to invoke tool.

      - If auth state is SKIP_AUTH, return the existing AuthContext.
      - If auth state is DO_REFRESH, it refreshes session, and update session.
      - If auth state is PENDING_RESOLVE or RESOLVED, it performs authentication. in pending_resolve state, it waits for user interaction.
      - Other cases(NO_SESSION or DO_AUTH) is not handled in this method , raise RuntimeError

      :param auth_req: authenticate request
      :type auth_req: AuthenticateRequest
      :param auth_handler_name: auth handler name
      :type auth_handler_name: Optional[str]
      :param auth_provider: auth provider
      :type auth_provider: Optional[AuthProvider]
      :param thread_id: thread id
      :type thread_id: Optional[str]
      :param profile: profile name
      :type profile: Optional[str]

      :returns: authentication context
      :rtype: AuthContext



   .. py:method:: get_auth_context(auth_provider: hyperpocket.auth.AuthProvider, thread_id: str = 'default', profile: str = 'default', **kwargs) -> Optional[hyperpocket.auth.context.AuthContext]


   .. py:method:: list_session_state(thread_id: str, auth_provider: Optional[hyperpocket.auth.AuthProvider] = None)


   .. py:method:: delete_session(auth_provider: hyperpocket.auth.AuthProvider, thread_id: str = 'default', profile: str = 'default') -> bool


   .. py:method:: find_handler_instance(name: Optional[str] = None, auth_provider: Optional[hyperpocket.auth.AuthProvider] = None) -> hyperpocket.auth.handler.AuthHandlerInterface


