libs.hyperpocket.hyperpocket.session.redis
==========================================

.. py:module:: libs.hyperpocket.hyperpocket.session.redis



Attributes
----------

.. autoapisummary::

   libs.hyperpocket.hyperpocket.session.redis.RedisSessionKey
   libs.hyperpocket.hyperpocket.session.redis.RedisSessionValue


Classes
-------

.. autoapisummary::

   libs.hyperpocket.hyperpocket.session.redis.RedisSessionStorage


Module Contents
---------------

.. py:data:: RedisSessionKey

.. py:data:: RedisSessionValue

.. py:class:: RedisSessionStorage(config: hyperpocket.config.session.SessionConfigRedis)

   Bases: :py:obj:`hyperpocket.session.interface.SessionStorageInterface`\ [\ :py:obj:`RedisSessionKey`\ , :py:obj:`RedisSessionValue`\ ]


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: client


   .. py:method:: session_storage_type() -> hyperpocket.config.session.SessionType
      :classmethod:



   .. py:method:: get(auth_provider: hyperpocket.auth.AuthProvider, thread_id: str, profile: str, **kwargs) -> Optional[hyperpocket.session.interface.V]

      Get session

      :param auth_provider: auth provider
      :type auth_provider: AuthProvider
      :param thread_id: thread id
      :type thread_id: str
      :param profile: profile name
      :type profile: str

      :returns: Session
      :rtype: V(BaseSessionValue)



   .. py:method:: get_by_thread_id(thread_id: str, auth_provider: Optional[hyperpocket.auth.AuthProvider] = None, **kwargs) -> List[hyperpocket.session.interface.V]

      Get session list by thread id

      :param auth_provider: auth provider
      :type auth_provider: AuthProvider
      :param thread_id: thread id
      :type thread_id: str

      :returns: Session List
      :rtype: List[V(BaseSessionValue)]



   .. py:method:: set(auth_provider: hyperpocket.auth.AuthProvider, thread_id: str, profile: str, auth_scopes: List[str], auth_resolve_uid: Optional[str], auth_context: Optional[hyperpocket.auth.context.AuthContext], is_auth_scope_universal: bool, **kwargs) -> hyperpocket.session.interface.V

      Set session, if a session doesn't exist, create new session
      If set auth_resolve_uid is None and auth_context is not None, created session is regarded as active session.

      :param auth_provider: auth provider
      :type auth_provider: AuthProvider
      :param thread_id: thread id
      :type thread_id: str
      :param profile: profile name
      :type profile: str
      :param auth_scopes: auth scopes
      :type auth_scopes: List[str]
      :param auth_resolve_uid: a UID used to verify whether the user has completed the authentication process.
                               if set this value as None, it's regarded as active session
      :type auth_resolve_uid: str
      :param auth_context: authentication context.
                           in pending session, this value is None. in active session this value shouldn't be None
      :type auth_context: Optional[AuthContext]
      :param is_auth_scope_universal: a flag to determine whether the session is scoped or not
      :type is_auth_scope_universal: bool

      :returns: Updated session
      :rtype: V(BaseSessionValue)



   .. py:method:: delete(auth_provider: hyperpocket.auth.AuthProvider, thread_id: str, profile: str, **kwargs) -> bool

      Delete session

      :param auth_provider: auth provider
      :type auth_provider: AuthProvider
      :param thread_id: thread id
      :type thread_id: str
      :param profile: profile name
      :type profile: str

      :returns: True if the session was deleted, False otherwise
      :rtype: bool



