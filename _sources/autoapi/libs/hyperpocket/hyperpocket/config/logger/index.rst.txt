libs.hyperpocket.hyperpocket.config.logger
==========================================

.. py:module:: libs.hyperpocket.hyperpocket.config.logger



Attributes
----------

.. autoapisummary::

   libs.hyperpocket.hyperpocket.config.logger.pocket_logger


Classes
-------

.. autoapisummary::

   libs.hyperpocket.hyperpocket.config.logger.ColorFormatter


Functions
---------

.. autoapisummary::

   libs.hyperpocket.hyperpocket.config.logger.get_logger


Module Contents
---------------

.. py:class:: ColorFormatter(fmt=None, datefmt=None, style='%', validate=True, *, defaults=None)

   Bases: :py:obj:`logging.Formatter`


   Custom formatter to add colors based on log level.


   .. py:attribute:: LEVEL_COLORS


   .. py:attribute:: RESET
      :value: '\x1b[0m'



   .. py:method:: format(record)

      Format the specified record as text.

      The record's attribute dictionary is used as the operand to a
      string formatting operation which yields the returned string.
      Before formatting the dictionary, a couple of preparatory steps
      are carried out. The message attribute of the record is computed
      using LogRecord.getMessage(). If the formatting string uses the
      time (as determined by a call to usesTime(), formatTime() is
      called to format the event time. If there is exception information,
      it is formatted using formatException() and appended to the message.



.. py:function:: get_logger()

.. py:data:: pocket_logger

