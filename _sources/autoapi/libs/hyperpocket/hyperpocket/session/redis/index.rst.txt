libs.hyperpocket.hyperpocket.session.redis
==========================================

.. py:module:: libs.hyperpocket.hyperpocket.session.redis



Attributes
----------

.. autoapisummary::

   libs.hyperpocket.hyperpocket.session.redis.RedisSessionKey
   libs.hyperpocket.hyperpocket.session.redis.RedisSessionValue


Classes
-------

.. autoapisummary::

   libs.hyperpocket.hyperpocket.session.redis.RedisSessionStorage


Module Contents
---------------

.. py:data:: RedisSessionKey

.. py:data:: RedisSessionValue

.. py:class:: RedisSessionStorage(config: hyperpocket.config.session.SessionConfigRedis)

   Bases: :py:obj:`hyperpocket.session.interface.SessionStorageInterface`\ [\ :py:obj:`RedisSessionKey`\ , :py:obj:`RedisSessionValue`\ ]


   .. py:attribute:: client


   .. py:method:: session_storage_type() -> hyperpocket.config.session.SessionType
      :classmethod:



   .. py:method:: get(auth_provider: hyperpocket.auth.AuthProvider, thread_id: str, profile: str, **kwargs) -> Optional[hyperpocket.session.interface.V]


   .. py:method:: get_by_thread_id(thread_id: str, auth_provider: Optional[hyperpocket.auth.AuthProvider] = None, **kwargs) -> List[hyperpocket.session.interface.V]


   .. py:method:: set(auth_provider: hyperpocket.auth.AuthProvider, thread_id: str, profile: str, auth_scopes: List[str], auth_resolve_uid: Optional[str], auth_context: Optional[hyperpocket.auth.context.AuthContext], is_auth_scope_universal: bool, **kwargs) -> hyperpocket.session.interface.V


   .. py:method:: delete(auth_provider: hyperpocket.auth.AuthProvider, thread_id: str, profile: str, **kwargs) -> bool


