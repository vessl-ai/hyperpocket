libs.hyperpocket.hyperpocket.pocket_main
========================================

.. py:module:: libs.hyperpocket.hyperpocket.pocket_main



Classes
-------

.. autoapisummary::

   libs.hyperpocket.hyperpocket.pocket_main.Pocket


Module Contents
---------------

.. py:class:: Pocket(tools: list[hyperpocket.tool_like.ToolLike], auth: hyperpocket.pocket_auth.PocketAuth = None, lockfile_path: Optional[str] = None, force_update: bool = False)

   Bases: :py:obj:`object`


   .. py:attribute:: server
      :type:  hyperpocket.server.server.PocketServer


   .. py:attribute:: core
      :type:  hyperpocket.pocket_core.PocketCore


   .. py:method:: invoke(tool_name: str, body: Any, thread_id: str = 'default', profile: str = 'default', *args, **kwargs) -> str

      Invoke Tool synchronously

      :param tool_name: tool name to invoke
      :type tool_name: str
      :param body: tool arguments. should be json format
      :type body: Any
      :param thread_id: thread id
      :type thread_id: str
      :param profile: profile name
      :type profile: str

      :returns: tool result
      :rtype: str



   .. py:method:: ainvoke(tool_name: str, body: Any, thread_id: str = 'default', profile: str = 'default', *args, **kwargs) -> str
      :async:


      Invoke Tool asynchronously

      :param tool_name: tool name to invoke
      :type tool_name: str
      :param body: tool arguments. should be json format
      :type body: Any
      :param thread_id: thread id
      :type thread_id: str
      :param profile: profile name
      :type profile: str

      :returns: tool result
      :rtype: str



   .. py:method:: invoke_with_state(tool_name: str, body: Any, thread_id: str = 'default', profile: str = 'default', *args, **kwargs) -> tuple[str, bool]

      Invoke Tool with state synchronously
      State indicates whether this tool is paused or not.
      If the tool needs user's interaction or waiting for some process, this tool is paused.

      :param tool_name: tool name to invoke
      :type tool_name: str
      :param body: tool arguments. should be json format
      :type body: Any
      :param thread_id: thread id
      :type thread_id: str
      :param profile: profile name
      :type profile: str

      :returns: tool result and state.
      :rtype: tuple[str, bool]



   .. py:method:: ainvoke_with_state(tool_name: str, body: Any, thread_id: str = 'default', profile: str = 'default', *args, **kwargs) -> tuple[str, bool]
      :async:


      Invoke Tool with state synchronously
      State indicates whether this tool is paused or not.
      If the tool needs user's interaction or waiting for some process, this tool is paused.

      :param tool_name: tool name to invoke
      :type tool_name: str
      :param body: tool arguments. should be json format
      :type body: Any
      :param thread_id: thread id
      :type thread_id: str
      :param profile: profile name
      :type profile: str

      :returns: tool result and state.
      :rtype: tuple[str, bool]



   .. py:method:: initialize_tool_auth(thread_id: str = 'default', profile: str = 'default') -> dict[str, str]
      :async:


      Initialize authentication for all tools.

      This method prepares all tools that require authentication by retrieving
      their respective authentication URIs.

      If no tool requires authentication, an empty list is returned.

      :param thread_id: The thread id. Defaults to 'default'.
      :type thread_id: str
      :param profile: The profile to be used for authentication. Defaults to 'default'.
      :type profile: str

      :returns: A list of authentication URIs for the tools that require authentication.
      :rtype: List[str]



   .. py:method:: wait_tool_auth(thread_id: str = 'default', profile: str = 'default') -> bool
      :async:


      Wait until all tool authentications are completed.

      This method waits until all tools associated with the given
      `thread_id` and `profile` have completed their authentication process.

      :param thread_id: The thread id. Defaults to 'default'.
      :type thread_id: str
      :param profile: The profile to be used for authentication. Defaults to 'default'.
      :type profile: str

      :returns: Returns `True` if all tool authentications are successfully completed,
                or `False` if the process was interrupted or failed.
      :rtype: bool



   .. py:method:: prepare_in_subprocess(tool_name: Union[str, List[str]], thread_id: str = 'default', profile: str = 'default', *args, **kwargs)
      :async:



   .. py:method:: authenticate_in_subprocess(tool_name: str, thread_id: str = 'default', profile: str = 'default', *args, **kwargs)
      :async:



   .. py:method:: tool_call_in_subprocess(tool_name: str, body: Any, thread_id: str = 'default', profile: str = 'default', *args, **kwargs)
      :async:



