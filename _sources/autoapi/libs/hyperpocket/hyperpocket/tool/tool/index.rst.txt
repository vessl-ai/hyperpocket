libs.hyperpocket.hyperpocket.tool.tool
======================================

.. py:module:: libs.hyperpocket.hyperpocket.tool.tool



Classes
-------

.. autoapisummary::

   libs.hyperpocket.hyperpocket.tool.tool.ToolAuth
   libs.hyperpocket.hyperpocket.tool.tool.Tool


Module Contents
---------------

.. py:class:: ToolAuth

   Bases: :py:obj:`pydantic.BaseModel`


   ToolAuth is an object that represents the authentication information required to invoke a tool


   .. py:attribute:: scopes
      :type:  list[str]


   .. py:attribute:: auth_provider
      :type:  Optional[hyperpocket.auth.provider.AuthProvider]


   .. py:attribute:: auth_handler
      :type:  Optional[str]


.. py:class:: Tool

   Bases: :py:obj:`pydantic.BaseModel`, :py:obj:`abc.ABC`


   Pocket Tool Interface


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: description
      :type:  str


   .. py:attribute:: argument_json_schema
      :type:  Optional[dict]


   .. py:attribute:: auth
      :type:  Optional[ToolAuth]


   .. py:attribute:: postprocessings
      :type:  Optional[list[Callable]]


   .. py:attribute:: default_tool_vars
      :type:  dict[str, str]


   .. py:attribute:: overridden_tool_vars
      :type:  dict[str, str]


   .. py:attribute:: use_profile
      :type:  bool
      :value: False



   .. py:method:: invoke(**kwargs) -> str
      :abstractmethod:


      Invoke the tool



   .. py:method:: ainvoke(**kwargs) -> str
      :abstractmethod:

      :async:


      Asynchronously invoke the tool



   .. py:method:: schema_model(use_profile: bool = False) -> Optional[Type[pydantic.BaseModel]]

      Returns a schema_model that wraps the existing argument_json_schema
      to include profile and thread_id as arguments when the tool is invoked



   .. py:method:: get_description(use_profile: bool = False) -> str


   .. py:method:: override_tool_variables(override_vars: dict[str, str]) -> Tool


   .. py:property:: tool_vars
      :type: dict[str, str]



   .. py:method:: with_postprocessing(postprocessing: Callable)

      Add a postprocessing function to the tool



   .. py:method:: with_postprocessings(postprocessings: list[Callable])

      Add a list of postprocessing functions to the tool
      Returns the tool itself



